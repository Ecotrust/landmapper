# Generated by Django 4.2b1 on 2023-03-14 23:27

import app.models
import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ForestType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('fortype', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Forest Type')),
                ('symbol', models.CharField(default=None, max_length=10)),
                ('can_class', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Cover Class')),
                ('diameter', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Tree Size Class')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Grid Cell Geometry')),
            ],
        ),
        migrations.CreateModel(
            name='MenuPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Menu Item')),
                ('order', models.SmallIntegerField(default=10)),
                ('staff_only', models.BooleanField(default=False)),
                ('header', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Popup Header')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default=None, null=True, verbose_name='Popup Body')),
            ],
        ),
        migrations.CreateModel(
            name='PopulationPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classification', models.CharField(default='city', max_length=100)),
                ('state', models.CharField(default='OR', max_length=30)),
                ('population', models.IntegerField()),
                ('place_fips', models.IntegerField()),
                ('density_sqmi', models.FloatField(blank=True, default=None, null=True)),
                ('area_sqmi', models.FloatField(blank=True, default=None, null=True)),
                ('population_class', models.SmallIntegerField(blank=True, default=None, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=3857, verbose_name='Population Center Geometry')),
            ],
        ),
        migrations.CreateModel(
            name='SoilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mukey', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('areasym', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('spatial', models.FloatField(blank=True, default=None, null=True)),
                ('musym', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('shp_lng', models.FloatField(blank=True, default=None, null=True)),
                ('shap_ar', models.FloatField(blank=True, default=None, null=True)),
                ('si_label', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('muname', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('drclssd', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('frphrtd', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('avg_rs_l', models.FloatField(blank=True, default=None, null=True)),
                ('avg_rs_h', models.FloatField(blank=True, default=None, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Grid Cell Geometry')),
            ],
        ),
        migrations.CreateModel(
            name='TwoWeekFollowUpSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_modified', models.DateField(auto_now=True)),
                ('email_sent', models.BooleanField(default=False)),
                ('survey_complete', models.BooleanField(default=False)),
                ('q4a_1_land_management', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me learn more about land I own or manage')),
                ('q4a_2_issue', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me learn more about an issue')),
                ('q4a_3_coordinate', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me coordinate with others')),
                ('q4a_4_decision', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me make a decision')),
                ('q4a_5_activity', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me implement or maintain a specific activity')),
                ('q4a_6_information', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app influenced me to pursue additional information or services')),
                ('q4a_7_plan', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Strongly Disagree'), ('2', 'Disagree'), ('3', 'Neither Agree Nor Disagree'), ('4', 'Agree'), ('5', 'Strongly Agree')], default=None, max_length=2, null=True, verbose_name='The app helped me complete a written Stewardship Plan or Forest Management Plan')),
                ('feedback', models.TextField(blank=True, default=None, null=True, verbose_name='Is there anything else youâ€™d like us to know about your experience using the app?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date Modified')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('manipulators', models.TextField(blank=True, help_text='csv list of manipulators to be applied', null=True, verbose_name='Manipulator List')),
                ('geometry_orig', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Original Polygon Geometry')),
                ('geometry_final', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857, verbose_name='Final Polygon Geometry')),
                ('record_taxlots', models.JSONField(default=app.models.PropertyRecord.taxlots_default, verbose_name='record_taxlots')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related', to='contenttypes.contenttype')),
                ('sharing_groups', models.ManyToManyField(blank=True, editable=False, related_name='%(app_label)s_%(class)s_related', to='auth.group', verbose_name='Share with the following groups')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_modified', models.DateField(auto_now=True)),
                ('profile_questions_status', models.CharField(blank=True, choices=[(None, 'User has not seen questions'), ('seen', 'User has seen the form'), ('done', 'User has filled out the questions.')], default=None, max_length=5, null=True)),
                ('type_selection', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Private forest owner'), ('2', 'Professional service provider (e.g., forester, conservationist)'), ('3', 'Student or educator'), ('4', 'Just curious'), ('5', 'Other [please specify]')], default=None, max_length=2, null=True, verbose_name='Which of the following roles best captures your primary use of this website?')),
                ('type_other', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Other primary use:')),
                ('has_plan', models.BooleanField(blank=True, choices=[(None, '----------------'), (False, 'No'), (True, 'Yes')], default=None, null=True, verbose_name='Do you have a written Forest Management Plan or Stewardship Plan for your property?')),
                ('plan_date', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'I Have No Plan'), ('2', 'Less than 1 year ago'), ('3', '1 to 5 years ago'), ('4', '5 to 10 years ago'), ('5', 'Over 10 years ago'), ('6', 'I am not sure')], default=None, max_length=2, null=True, verbose_name='If so, when was your most recent Plan prepared?')),
                ('q3_1_health', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Maintaining long-term forest health and productivity')),
                ('q3_2_habitat', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Protecting or improving wildlife habitat')),
                ('q3_3_beauty', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Maintaining natural beauty and aesthetics')),
                ('q3_4_next_gen', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Preserving the land for the next generation')),
                ('q3_5_risks', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Reducing fire or pest risks')),
                ('q3_6_climate_change', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Adapting the land for climate change')),
                ('q3_7_carbon', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Sequestering carbon')),
                ('q3_8_invasive_species', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Addressing invasive species')),
                ('q3_9_timber', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Harvesting and selling timber')),
                ('q3_10_profit', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Earning a profit from the land')),
                ('q3_11_cultural_uses', models.CharField(blank=True, choices=[(None, '----------------'), ('1', 'Not a Priority'), ('2', 'Low Priority'), ('3', 'Medium Priority'), ('4', 'High Priority'), ('5', 'Essential')], default=None, max_length=2, null=True, verbose_name='Maintaining personal or cultural uses of the land (hunting, gathering, hiking, camping, fishing, etc.)')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
